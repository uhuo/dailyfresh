"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
#import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

### 为了省略apps.goods前面的apps，添加apps路径 到系统路径
#sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'de)43!t)kvc$v+7r2m(+b%+i&h_+l$p8*ig!x-+fv%_rk0$bcp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack', # 注册 全文检索框架
    'apps.goods',   # 商品模块
    'apps.order',   # 订单模块
    'apps.user',    # 用户模块
    'apps.cart',    # 购物车模块
    'tinymce',  # added, because the use of HTMLField
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dailyfresh',
        'USER': 'root',
        'PASSWORD': 'Ogbai0110',
        'HOST': '127.0.0.1',    # ip of database

    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
#LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'UTC'
#TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


###################################################################################################
# 替换Django 认证系统 使用的 模型类，
# 此时新建的用户的所有信息 都会 保存在AUTH_USER_MODEL('user.User')所定义的表中(db_table = 'df_user')
########################################
AUTH_USER_MODEL = 'user.User' # 认证user时，所使用的model类


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# 指定 DJANGO静态文件 存放的路径
STATIC_ROOT = '/usr/local/var/www/static/'





###################################################################################################
# added by myself，指定 富文本编辑器的默认配置
#################

TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advanced',
    'width': 600,
    'height': 400,
}


# 邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = 'lddriver@163.com'
EMAIL_HOST_PASSWORD = 'Ogbai0110'
EMAIL_FROM = 'DailyFresh<lddriver@163.com>'


# django的缓存配置： 使用redis 做为 缓存(cache)
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://10.211.55.15:6379/9",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }

}


# 配置session的存储方式：把cache作为session的 后端存储
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


# 进入 用户相关页面 时：如果用户没有登录，重定向到该路径
LOGIN_URL = '/user/login/'


# 设置django的文件存储类，上传文件时 django会调用 该文件存储类的相关方法(把文件上传到 fastdfs\)
DEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'


# 设置 fastdfs文件系统 使用的 client.conf文件路径
FDFS_CLIENT_CONF = './utils/fdfs/client.conf'
# 设置 fastdfs存储服务器上 nginx使用的IP和端口号
FDFS_STORAGE_URL = 'http://10.211.55.15:8888/'



# 配置 全文检索框架(haystack)使用 检索引擎(whoosh)
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh引擎
        # haystack 通过 下面路径 中的 WhooshEngine类，来使用whoosh检索引擎
        # WhooshEngine的路径 venv/lib/site-packages/haystack/backends/whoosh_backend.py WhooshEngine类
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        # 索引文件的 存放路径，所有的 索引文件 都存放在 该目录下。生成索引文件时，自动 在目录(BASE_DIR)下 创建目录(whoosh_index)
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

# 检索引擎(whoosh)的作用: 对 表中的某些字段 进行 关键词分析，在 关键词 和 表中其它记录s 之间 建立联系(索引表)
# 表中 字段内容 发生变化时，索引 也应发生变化 来适应 字段内容的变化。

# 当表中数据 发生变化(添加 删除 修改)时，自动生成 新的索引(替换 旧的索引)
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 指定 每页显示的 搜索结果的条目数量
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 1





























